if (word == "create"){
        string word2, word3;
        while (inputfile.peek() != EOF){
            inputfile >> word2;
            inputfile >> word3;
        }
        outputfile << "PROCESSING COMMAND: " << word << " " << word2 << " " << word3 << "\n";
        if (checkName(word2, nameList, outputfile)){

        }
        if (word3 == "stack"){

        }
        else if (word3 == "queue"){

        }
    }
    else if (word == "push"){
//        string word2, word3;
//        while (inputfile.peek() != EOF){
//           inputfile >> word2;
//            inputfile >> word3;
//        }
        outputfile << "PROCESSING COMMAND: " << word << " " << word2 << " " << word3 << "\n";

    }
    else if (word == "pop"){
        string word2;
        while (inputfile.peek() != EOF){
            inputfile >> word2;
        }
        outputfile << "PROCESSING COMMAND: " << word << " " << word2 << " " << "\n";
    }
}

void checkWord (string word, ifstream &inputfile, ofstream &outputfile) {
    list < simpleList<int> * > listSLi; //all integer stacks and queues
    list < simpleList<double> * > listSLd; //all double stacks and queues
    list < simpleList<string> * > listSLs; //all string stacks and queues
    list <string> nameList; //list of all list names

}

int main() {
    ifstream inputfile;
    ofstream outputfile;
    outputfile.open("output.txt");
    inputfile.open("input.txt");
    if (inputfile.is_open()){
        while( inputfile.peek() != EOF ){
            inputfile >> word;
            inputfile >> word2;
            inputfile >> word3;

            //checkWord(word, inputfile, outputfile);
            word.clear();
            word2.clear();
            word3.clear();
        }
        inputfile.close();
    }
    outputfile.close();
    return 0;
}


ITERATOR CODE:
list<simpleList<int>*>::iterator it;
                for (it = listSLi.begin(); it != listSLi.end(); it++){
                    cout << *it;
                }